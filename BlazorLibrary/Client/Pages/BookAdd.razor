@page "/books/add"

@using BlazorLibrary.Shared.Books.Commands
@using Blazored.FluentValidation
@using BlazorLibrary.Client.Components.Books.EditComponents
@using Newtonsoft.Json

<EditForm Model="@NewBook" OnSubmit="OnSubmitMethod">
    <FluentValidationValidator />
    <!-- Content Wrapper. Contains page content -->
    <div class="content-wrapper">
        <!-- Content Header (Page header) -->
        <section class="content-header">
            <div class="container-fluid">
                <div class="row mb-2">
                    <div class="col-sm-6">
                        <h1>Book Add</h1>
                    </div>
                    <div class="col-sm-6">
                        <ol class="breadcrumb float-sm-right">
                            <li class="breadcrumb-item"><a href="#">Home</a></li>
                            <li class="breadcrumb-item active">Book Add</li>
                        </ol>
                    </div>
                </div>
            </div><!-- /.container-fluid -->
        </section>

        <!-- Main content -->
        <section class="content">
            <div class="row">
                <div class="col-md-6">
                    <BookAddGeneral/>
                </div>
                
            </div>
            <div class="row">
                <div class="col-12">
                    <a href="#" class="btn btn-secondary">Cancel</a>
                    <input type="submit" value="Add new book" class="btn btn-success float-right">
                </div>
            </div>
        </section>
        <!-- /.content -->
    </div>
    <!-- /.content-wrapper -->
    @*</html>*@
    <ValidationSummary />
</EditForm>

@code {
    public AddBookVM NewBook { get; set; } = new();

    private IReadOnlyList<IBrowserFile> files;

    private async void OnSubmitMethod(EditContext editContext)
    {
        if (editContext.Validate())
        {
            foreach(var file in files)
            {
                Stream stream = file.OpenReadStream();
                MemoryStream ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                stream.Close();

                Console.WriteLine($"File name: {file.Name} has size of {file.Size}");
                Console.WriteLine($"Stream has {ms.ToArray().Length} size");
               
                ms.Close();
            }
            Console.WriteLine("Book has been validated");
        }
        else
        {
            Console.WriteLine("Book has not been validated");
        }
    }

}